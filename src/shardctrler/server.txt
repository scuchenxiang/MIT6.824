lab4a:
对于server，一开始初始化各个元素
然后开启apply协程

这个协程中，不断接收来自raft的管道信息，如果信息中的msg非快照类的，同时这个请求没有重复，
没重复就执行join函数，leave函数，move函数，query函数，同时向msgnotify写入管道信息



join函数，配置号加1，将请求的server放到对应的group中，然后调整config，追加config
leave，配置号加1，删除某个group的server，然后将对应的里面的shard标记为未分配，然后调整config，追加config
move，配置号加1，移动分片到指定的组，执行完之后不用调整config，追加config
query，查询任意时期的配置，没有指定的函数（query只需要返回对应的config就可以）

4个RPC函数：
这四个最后都是执行waitcmd函数，对于每个命令执行在底层的raft中添加命令，然后等待msgnotify结果
根据是否是leader，是否超时，返回对应的msgnotify



当客户端发起group的加入，离开，移动，或者查询任意配置的时候，
server执行join（例如）函数，然后执行runcmd函数（在这里将加入reqId，随机值）
然后执行waitcmd函数，交给底层的raft提交日志，如果非leader，或者超时，返回，
如果收到返回回复的msg的通道数据， 
删除通道的数据返回

client:
这个客户的程序就是，对于已知的server，不断循环去遍历请求(query,move,join,leave)
如果对方不是leader或者返回不对，就休息一段时间，选下一个机器，
其中msgid是随机生成的，ckid也是随机生成的

lab4b
一开始启动三个协程
applydb：一个不断获取底层raft的状态机的信息，如果为快照的命令，那么就读取快照信息
如果不是那么就看日志的command是哪种命令，
如果是更新配置的命令，如果原来就是这个group的只更新shard配置号，原来不是的这个shard的，就添加需要pullmap的信息，后续进行拉取
如果是拉取shard的命令shard，更新了对应shard的kvdb，以及clientseqNum,并且将kv.pullMap的valid设置为false，同时更新shardsVerNum
如果是删除shard的命令，如果请求我们删除的配置号不比我们旧，删除shard和clientseqnum，否则不删除，返回reschan结果
如果是删除pullmap的命令，那么就删除对应的pullmap
如果是get，put，append命令，若shard的版本号与kv的配置号不一样，说明正在传输，返回正在传输的结果，如果一致，在对应的数据库中更新，返回reschan结果

pollconfig:
每隔一段时间就向ctrler节点请求新的配置，如果不需要拉取shard，没有正在传输的config，就更新config，向raft添加ShardConfigOp更新配置的命令

pollshard:
每隔一段时间，就对pullmap中的需要拉取的shard进行拉取，
 给出args参数，对于返回的reply，如果成功，向raft写入拉取shard的命令
如果valid为false，说明需要删除，对于返回的reply，如果成功，也向raft写入删除pullmap的命令


4个RPC函数：
对于kvdb:
PullShard:如果对方想拉shard，同时我的配置号更新，就把shard给他，否则返回false
DeleteShard：如果我的对应的shard的配置号比参数发过来的配置号更旧，说明确实可以删除，
此时让底层的raft进行同步删除shard的命令，如果是leader，并且reschan对应命令的管道信息不是正在传输的状态，
那么就为success，超时或者其他情况返回false
get:
应对客户端发起的get请求，先交给底层的raft进行处理，然后等待reschan通道结果

PutAppend
应对客户端发起的putappend请求，先交给底层的raft进行处理，然后等待reschan通道结果

客户端：
//put 或者append或者get
//对于每个key，获取它所处的shard，然后对负责这个shard的group上的每个server，进行请求，
// 如果成功，或者没有这个key，返回reply，如果group错误或者正在传输中直接退出
//同时每隔一段时间向ctrler节点查询最新配置


